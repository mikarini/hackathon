function RCChartBeatStrategy(t) { this._player = t, this._urlTeaser = "", this._totalDuration = 0, this._title = "", this._playerType = "flash", this._videoId = 0, this._isReady = !1, this._viewStartTime = new Stopwatch, this._viewPlayTime = new Stopwatch, this._viewAdPlayTime = new Stopwatch, this._activeVideoState = RCChartBeatStrategy.VideoState.UNPLAYED, this._activeContent = RCChartBeatStrategy.ContentType.AD, this._viewCurrentTime = 0, this._autoplayType = RCChartBeatStrategy.AutoplayType.UNKNOWN; var e = getParameterByName("isAutoPlay"); this._autoplayType = e || "1" == e ? RCChartBeatStrategy.AutoplayType.AUTOPLAY : RCChartBeatStrategy.AutoplayType.MANUAL, this._player.addEventListener(RadioCanada.player.events.AD_PLAY, function () { this._viewAdPlayTime.start(), this._activeContent = RCChartBeatStrategy.ContentType.AD }.bind(this)), this._player.addEventListener(RadioCanada.player.events.PLAY, function () { this._viewPlayTime.started || this._viewPlayTime.start(), this._activeVideoState = RCChartBeatStrategy.VideoState.PLAYED }.bind(this)), this._player.addEventListener(RadioCanada.player.events.AD_COMPLETE, function () { this._activeContent = RCChartBeatStrategy.ContentType.CONTENT, this._viewStartTime.started || this._viewStartTime.start() }.bind(this)), this._player.addEventListener(RadioCanada.player.events.PAUSE, function () { this._viewStartTime.stop(), this._activeVideoState = RCChartBeatStrategy.VideoState.STOPPED }.bind(this)), this._player.addEventListener(RadioCanada.player.events.CURRENT_TIME_CHANGE, function (t) { this._viewCurrentTime = t }.bind(this)), this._player.addEventListener(RadioCanada.player.events.COMPLETE, function () { this._activeVideoState = RCChartBeatStrategy.VideoState.COMPLETED }.bind(this)); var a = getPlayerMetas(this._player); a && (a.title && (this._title = a.title), a.posterUrl && (this._urlTeaser = a.posterUrl), a.duration && !isNaN(a.duration) && (this._totalDuration = a.duration), a.providerId && (this._playerType = a.providerId.toString()), a.idMedia && (this._videoId = a.idMedia), this._isReady = !0) } function getPlayerMetas(t) { if (void 0 !== t.metas) return t.metas; setTimeout(function () { getPlayerMetas(t) }, 250) } function Stopwatch(t, e, a) { this.startTime = 0, this.stopTime = 0, this.totalElapsed = 0, this.started = !1, this.listener = void 0 != t ? t : null, this.countUp = void 0 === a || a, this.tickResolution = void 0 != e ? e : 500, this.tickInterval = null } RCChartBeatStrategy.ContentType = { AD: "ad", CONTENT: "ct" }, RCChartBeatStrategy.AdPosition = { PREROLL: "a1", MIDROLL: "a2", POSTROLL: "a3", OVERLAY: "a4", SPECIAL: "a5" }, RCChartBeatStrategy.VideoState = { UNPLAYED: "s1", PLAYED: "s2", STOPPED: "s3", COMPLETED: "s4" }, RCChartBeatStrategy.AutoplayType = { UNKNOWN: "unkn", MANUAL: "man", AUTOPLAY: "auto", CONTINUOUS: "cont" }, RCChartBeatStrategy.prototype.isReady = function () { return this._isReady }, RCChartBeatStrategy.prototype.getTitle = function () { return this._title }, RCChartBeatStrategy.prototype.getVideoPath = function () { return this._videoId.toString() }, RCChartBeatStrategy.prototype.getContentType = function () { return this._activeContent.toString() }, RCChartBeatStrategy.prototype.getAdPosition = function () { return RCChartBeatStrategy.AdPosition.PREROLL.toString() }, RCChartBeatStrategy.prototype.getTotalDuration = function () { return 1e3 * this._totalDuration }, RCChartBeatStrategy.prototype.getState = function () { return this._activeVideoState.toString() }, RCChartBeatStrategy.prototype.getCurrentPlayTime = function () { return 1e3 * this._viewCurrentTime }, RCChartBeatStrategy.prototype.getBitrate = function () { return 800 }, RCChartBeatStrategy.prototype.getThumbnailPath = function () { return this._urlTeaser }, RCChartBeatStrategy.prototype.getPlayerType = function () { return this._playerType }, RCChartBeatStrategy.prototype.getViewStartTime = function () { return 1e3 * this._viewStartTime }, RCChartBeatStrategy.prototype.getViewPlayTime = function () { return this._viewPlayTime }, RCChartBeatStrategy.prototype.getViewAdPlayTime = function () { return this._viewAdPlayTime }, RCChartBeatStrategy.verify = function (t) { return "function" == typeof t.play && "object" == typeof t.events }, RCChartBeatStrategy.prototype.getStrategyName = function () { return "RCS" }, RCChartBeatStrategy.prototype.getAutoplayType = function () { return this._autoplayType.toString() }; var getParameterByName = function (t, e) { e || (e = window.location.href), t = t.replace(/[\[\]]/g, "\\$&"); var a = new RegExp("[?&]" + t + "(=([^&#]*)|&|#|$)", "i").exec(e); return a ? a[2] ? decodeURIComponent(a[2].replace(/\+/g, " ")) : "" : null }; Stopwatch.prototype.start = function () { this.started || (this.startTime = (new Date).getTime(), this.stopTime = 0, this.started = !0, this.tickInterval = setInterval(function (t, e) { return function () { return e.call(t) } }(this, this.onTick), this.tickResolution)) }, Stopwatch.prototype.stop = function () { if (this.started) { this.stopTime = (new Date).getTime(), this.started = !1; var t = this.stopTime - this.startTime; this.totalElapsed += t, null != this.tickInterval && clearInterval(this.tickInterval) } return this.getElapsed() }, Stopwatch.prototype.reset = function () { if (this.totalElapsed = 0, this.startTime = (new Date).getTime(), this.stopTime = this.startTime, this.countUp || (this.totalElapsed = this.initialElapsed), null != this.tickInterval) { clearInterval(this.tickInterval), this.tickInterval = setInterval(function (t, e) { return function () { return e.call(t) } }(this, this.onTick), this.tickResolution) } }, Stopwatch.prototype.restart = function () { this.stop(), this.reset(), this.start() }, Stopwatch.prototype.getElapsed = function () { var t = 0; return this.started && (t = (new Date).getTime() - this.startTime), t += this.totalElapsed, this.countUp || (t = Math.max(2 * this.initialElapsed - t, 0)), t }, Stopwatch.prototype.toString = function () { return this.getElapsed() }, Stopwatch.prototype.setListener = function (t) { this.listener = t }, Stopwatch.prototype.onTick = function () { null != this.listener && this.listener(this) };